{"version":3,"sources":["components/DPauseButton.js","images/imageList.js","components/Diaporama.js","App.js","serviceWorker.js","index.js"],"names":["DPauseButton","props","Button","variant","onClick","isPaused","Categories","portrait","name","style","paysage","ImageList","src","categories","getRandomInt","max","Math","floor","random","styles","imageDiv","alignItems","justifyContent","display","flexDirection","textAndButtonDiv","position","image","paddingTop","textAlign","resizeMode","maxWidth","imageText","fontFamily","fontSize","fontWeight","fontStyle","Diaporama","state","seconds","timeSwitch","imageShown","getRandomImage","this","imageTimer","setInterval","updateTime","clearInterval","length","setState","Image","fluid","debugText","pauseDiaporama","React","Component","App","background","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kRAmBeA,MAhBf,SAAsBC,GASlB,OACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,kBAAMH,EAAMG,aAPxB,IAAnBH,EAAMI,SACE,yCAEA,uCCPdC,EAAa,CACfC,SAAU,CAACC,KAAM,WAAYC,MAAO,YACpCC,QAAS,CAACF,KAAM,UAAWC,MAAO,YAcvBE,EANG,CACd,CAACH,KAAM,mBAAoBI,IAAK,2DAA4DC,WAAY,CAACP,EAAWC,WACpH,CAACC,KAAM,MAAOI,IAAK,mCAAoCC,WAAY,CAACP,EAAWC,WAC/E,CAACC,KAAM,SAAUI,IAAK,mCAAoCC,WAAY,CAACP,EAAWC,YCRtF,SAASO,EAAaC,GAClB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,IAGjD,IAAMI,EAAS,CACXC,SAAU,CACNC,WAAY,SACZC,eAAgB,SAChBC,QAAS,OACTC,cAAe,UAEnBC,iBAAkB,CACdC,SAAU,WACVH,QAAS,OACTC,cAAe,UAEnBG,MAAO,CACHC,WAAY,GACZC,UAAW,SACXR,WAAY,SACZS,WAAY,UACZC,SAAU,OAEdC,UAAW,CACPC,WAAY,aACZC,SAAU,GACVC,WAAY,IACZC,UAAW,WAyFJC,E,kDApFX,WAAYpC,GAAQ,IAAD,8BACf,cAAMA,IACDqC,MAAQ,CACTC,QAAS,EACTC,WAAY1B,EAAa,IACzBT,UAAU,EACVoC,WAAY,EAAKC,kBANN,E,gEAUE,IAAD,OAChBC,KAAKC,WAAaC,aACd,kBAAM,EAAKC,eACX,O,6CAKJC,cAAcJ,KAAKC,c,uCAInB,OAAQjC,EAAUG,EAAaH,EAAUqC,OAAS,M,kCAI9C,I,uCAIU,IAAD,QACe,IAAxBL,KAAKL,MAAMjC,UAGXsC,KAAKM,UAAS,SAACX,GAAD,MAAY,CACtBjC,UAAU,MAEd0C,cAAcJ,KAAKC,cAInBD,KAAKM,UAAS,SAACX,GAAD,MAAY,CACtBjC,UAAU,MAEdsC,KAAKC,WAAaC,aACd,kBAAM,EAAKC,eACX,Q,mCAQRH,KAAKM,UAAS,SAACX,GAAD,MAAY,CACtBC,QAASD,EAAMC,QAAU,MAIzBI,KAAKL,MAAMC,UAAYI,KAAKL,MAAME,YAClCG,KAAKM,SAAS,CACVV,QAAS,EACTC,WAAY1B,EAAa,IACzB2B,WAAYE,KAAKD,qB,+BAMnB,IAAD,OACL,OACI,yBAAKjC,MAAOU,EAAOC,UACnB,kBAAC8B,EAAA,EAAD,CAAOtC,IAAK+B,KAAKL,MAAMG,WAAW7B,IAAKH,MAAOU,EAAOQ,MAAOwB,OAAK,IAC7D,yBAAK1C,MAAOU,EAAOM,kBACf,0BAAMhB,MAAOU,EAAOa,WAAYW,KAAKL,MAAMG,WAAWjC,MACrDmC,KAAKS,YACN,kBAAC,EAAD,CAAchD,QAAS,kBAAM,EAAKiD,kBAAkBhD,SAAUsC,KAAKL,MAAMjC,iB,GA7ErEiD,IAAMC,WCffC,MATf,WACI,OACI,yBAAK/C,MAAO,CAAC,YAAa,cAAe,YAAa,OAClDgD,WAAW,gEACX,kBAAC,EAAD,QCNQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c067bbc9.chunk.js","sourcesContent":["import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nfunction DPauseButton(props)\n{\n    function displayLogic() {\n        if (props.isPaused === true)\n            return (<h1>Continuer</h1>)\n        else\n            return (<h1>Pause</h1>)\n    }\n\n    return (\n        <Button variant=\"primary\" onClick={() => props.onClick()}>\n            {displayLogic()}\n        </Button>\n    );\n}\n\nexport default DPauseButton;","//Liste des images\n\nconst Categories = {\n    portrait: {name: \"portrait\", style: \"Portrait\"},\n    paysage: {name: \"paysage\", style: \"Paysage\"},\n}\n\n// Liste des images\n// Une image est un objet qui contient\n// name : le nom de l'image\n// src : le chemin vers la source de l'image\n// categories : un tableau contenant les catégories\nconst ImageList = [\n    {name: \"Through my phone\", src: \"https://i.ibb.co/tYZ63VV/see-through-phone-ile-de-re.jpg\", categories: [Categories.portrait]},\n    {name: \"Red\", src: \"https://i.ibb.co/t2P43Mm/red.jpg\", categories: [Categories.portrait]},\n    {name: \"Redddd\", src: \"https://i.ibb.co/t2P43Mm/red.jpg\", categories: [Categories.portrait]}\n]\n\nexport default ImageList;","import React from 'react';\nimport Image from 'react-bootstrap/Image';\n\nimport DPauseButton from './DPauseButton'\nimport ImageList from '../images/imageList.js';\n\n\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n\nconst styles = {\n    imageDiv: {\n        alignItems: 'center',\n        justifyContent: 'center',\n        display: 'flex',\n        flexDirection: 'column'\n    },\n    textAndButtonDiv: {\n        position: 'relative',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    image: {\n        paddingTop: 20,\n        textAlign: 'center',\n        alignItems: 'center',\n        resizeMode: 'contain',\n        maxWidth: \"60%\",\n    },\n    imageText: {\n        fontFamily: 'Monsterrat',\n        fontSize: 60,\n        fontWeight: 800,\n        fontStyle: 'italic',\n    }\n}\n\nclass Diaporama extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            seconds: 0,\n            timeSwitch: getRandomInt(60),\n            isPaused: false,\n            imageShown: this.getRandomImage()\n        }\n    }\n\n    componentDidMount() {\n        this.imageTimer = setInterval(\n            () => this.updateTime(),\n            1000\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.imageTimer);\n    }\n\n    getRandomImage() {\n        return (ImageList[getRandomInt(ImageList.length - 1)]);\n    }\n\n    debugText() {\n        if (false)\n            return (<h1>Secondes: {this.state.seconds}, Target: {this.state.timeSwitch}</h1>);\n    }\n\n    pauseDiaporama() {\n        if (this.state.isPaused === false) {\n            // Si l'utilisateur met pause\n            // Alors on stoppe le timer\n            this.setState((state) => ({\n                isPaused: true,\n            }));\n            clearInterval(this.imageTimer);\n        } else {\n            // Si l'utilisateur continue\n            // Alors on relance un timer\n            this.setState((state) => ({\n                isPaused: false,\n            }));\n            this.imageTimer = setInterval(\n                () => this.updateTime(),\n                1000\n            );\n        }\n    }\n\n    updateTime() {\n\n        // On update les secondes\n        this.setState((state) => ({\n            seconds: state.seconds + 1,\n        }));\n\n        // Si secondes équivaut a timeSwitch alors on change d'image\n        if (this.state.seconds === this.state.timeSwitch) {\n            this.setState({\n                seconds: 0,\n                timeSwitch: getRandomInt(60),\n                imageShown: this.getRandomImage()\n            });\n            //Changer d'image ici\n        }\n    }\n\n    render() {\n        return (\n            <div style={styles.imageDiv}>\n            <Image src={this.state.imageShown.src} style={styles.image} fluid></Image>\n                <div style={styles.textAndButtonDiv}>\n                    <text style={styles.imageText}>{this.state.imageShown.name}</text>\n                    {this.debugText()}\n                    <DPauseButton onClick={() => this.pauseDiaporama()} isPaused={this.state.isPaused}></DPauseButton>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Diaporama;","import React from 'react';\nimport './App.css';\n\nimport Diaporama from './components/Diaporama'\n\nconst Box = ({color1}) => {\n    const rgb = [color1.substring(1,3), color1.substring(3,5), color1.substring(5,7)];\n    const color2 = `rgb(${rgb.map(c => (parseInt(c, 16) * 0.8)).join()})`;\n    return (\n        <div className=\"box\" style={{maxWidth: '100%', background: `linear-gradient(${color1}, ${color2})`}} />\n    );\n}\n\n\nfunction App() {\n    return (\n        <div style={{'--color-1': 'deepskyblue', '--color-2': 'navy',\n            background: `linear-gradient(170deg, var(--color-1), var(--color-2) 80%)`}}>\n            <Diaporama />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//Bootstrap\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}