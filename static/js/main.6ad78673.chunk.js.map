{"version":3,"sources":["components/DPauseButton.js","components/DModal.js","components/DImageLoading.js","images/imageList.js","components/Diaporama.js","App.js","serviceWorker.js","index.js"],"names":["DPauseButton","props","Button","variant","onClick","isPaused","DModal","Modal","show","showModal","onHide","hideModal","size","Header","closeButton","Title","imageShown","name","Body","Image","src","fluid","toReturn","categories","forEach","element","push","style","join","showCategories","Footer","DImageLoading","isImageLoaded","Spinner","animation","role","className","isImageFailLoaded","Categories","portrait","montage","paysage","sneakers","architecture","lightPainting","ImageList","getRndInteger","min","max","Math","floor","random","styles","imageDiv","alignItems","justifyContent","display","flexDirection","textAndButtonDiv","position","image","paddingTop","textAlign","resizeMode","maxWidth","imageText","fontFamily","fontSize","fontWeight","fontStyle","Diaporama","state","seconds","timeSwitch","getRandomImage","this","imageTimer","setInterval","updateTime","clearInterval","length","setState","bool","nextImage","onLoad","setImageLoaded","onError","setImageFailLoaded","pauseDiaporama","React","Component","App","background","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ad78673.chunk.js","sourcesContent":["import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nfunction DPauseButton(props)\n{\n    function displayLogic() {\n        if (props.isPaused === true)\n            return (<h1>Continuer</h1>)\n        else\n            return (<h1>Pause</h1>)\n    }\n\n    return (\n        <Button variant=\"primary\" onClick={() => props.onClick()}>\n            {displayLogic()}\n        </Button>\n    );\n}\n\nexport default DPauseButton;","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Image from 'react-bootstrap/Image';\n\nfunction DModal(props) {\n\n    function showCategories() {\n        var toReturn = [];\n\n        props.imageShown.categories.forEach(element => {\n            toReturn.push(element.style);\n        })\n\n        return (<h3>Catégories : {toReturn.join(\" \")}</h3>);\n    }\n\n    return (\n        <div>\n            <Modal show={props.showModal} onHide={props.hideModal} size=\"xl\">\n                <Modal.Header closeButton>\n                    <Modal.Title>{props.imageShown.name}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Image src={props.imageShown.src} fluid></Image>\n                    {showCategories()}\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={props.hideModal}>\n                        Fermer\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    );\n}\n\nexport default DModal;","import React from 'react';\nimport Spinner from 'react-bootstrap/Spinner'\n\nfunction DImageLoading(props)\n{\n    if (props.isImageLoaded === false) {\n        return (\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Chargement...</span>\n            </Spinner>\n        );\n    } else if (props.isImageLoaded === true)\n        return (<div></div>);\n    else if (props.isImageFailLoaded === true)\n        return (<h3>Hey the image failed to load would you refresh that window please ?</h3>);\n}\n\nexport default DImageLoading;","//Liste des images\n\nconst Categories = {\n    portrait: {name: \"portrait\", style: \"Portrait\"},\n    montage: {name: \"montage\", style: \"Montage\"},\n    paysage: {name: \"paysage\", style: \"Paysage\"},\n    sneakers: {name: \"sneakers\", style: \"Sneakers\"},\n    architecture: {name: \"architecture\", style: \"Architecture\"},\n    lightPainting: {name: \"lightPainting\", style: \"Light Painting\"}\n}\n\n// Liste des images\n// Une image est un objet qui contient\n// name : le nom de l'image\n// src : le chemin vers la source de l'image\n// categories : un tableau contenant les catégories\nconst ImageList = [\n    {name: \"Through my phone\", src: \"https://i.ibb.co/tYZ63VV/see-through-phone-ile-de-re.jpg\", categories: [Categories.paysage, Categories.montage]},\n    {name: \"Red\", src: \"https://i.ibb.co/t2P43Mm/red.jpg\", categories: [Categories.architecture]},\n    {name: \"AJ3\", src: \"https://i.ibb.co/XD0JKbd/Jordan-2.jpg\", categories: [Categories.sneakers]},\n    {name: \"Blue\", src: \"https://i.ibb.co/BZhVgcg/square.jpg\", categories: [Categories.architecture]},\n    {name: \"Pink Sunset\", src: \"https://i.ibb.co/y6KnZfY/IMG-3878.jpg\", categories: [Categories.paysage]},\n    {name: \"Red and White\", src: \"https://i.ibb.co/YpMytxS/light-painting.jpg\", categories: [Categories.lightPainting]},\n]\n\nexport default ImageList;","import React from 'react';\nimport Image from 'react-bootstrap/Image';\n\nimport DPauseButton from './DPauseButton'\nimport DModal from './DModal'\nimport DImageLoading from './DImageLoading'\nimport ImageList from '../images/imageList.js';\n\n\nfunction getRndInteger(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) ) + min;\n}\n\nconst styles = {\n    imageDiv: {\n        alignItems: 'center',\n        justifyContent: 'center',\n        display: 'flex',\n        flexDirection: 'column'\n    },\n    textAndButtonDiv: {\n        position: 'relative',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    image: {\n        paddingTop: 20,\n        textAlign: 'center',\n        alignItems: 'center',\n        resizeMode: 'contain',\n        maxWidth: \"60%\",\n    },\n    imageText: {\n        fontFamily: 'Monsterrat',\n        fontSize: 60,\n        fontWeight: 800,\n        fontStyle: 'italic',\n    }\n}\n\nclass Diaporama extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            seconds: 0,\n            timeSwitch: getRndInteger(10, 60),\n            isPaused: false,\n            imageShown: this.getRandomImage(),\n            showModal: false,\n            isImageLoaded: false,\n            isImageFailLoaded: false\n        }\n    }\n\n    componentDidMount() {\n        this.imageTimer = setInterval(\n            () => this.updateTime(),\n            1000\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.imageTimer);\n    }\n\n    getRandomImage() {\n        return (ImageList[getRndInteger(0, ImageList.length - 1)]);\n    }\n\n    showModal() {\n        this.setState({\n            showModal: true\n        });\n    }\n\n    hideModal() {\n        this.setState({\n            showModal: false\n        });\n    }\n\n    setImageLoaded(bool) {\n        this.setState({\n            isImageLoaded: bool\n        });\n    }\n\n    setImageFailLoaded(bool) {\n        this.setState({\n            isImageFailLoaded: bool\n        });\n    }\n\n    pauseDiaporama() {\n        if (this.state.isPaused === false) {\n            this.setState((state) => ({\n                isPaused: true,\n            }));\n            clearInterval(this.imageTimer);\n        } else {\n            this.setState((state) => ({\n                isPaused: false,\n            }));\n            this.imageTimer = setInterval(\n                () => this.updateTime(),\n                1000\n            );\n        }\n    }\n\n    /**\n     * This method modifies the states of the Diaporama component\n     * to show a new image to the user\n     */\n    nextImage() {\n        this.setState({\n            seconds: 0,\n            timeSwitch: getRndInteger(10, 60),\n            imageShown: this.getRandomImage(),\n            showModal: false,\n            isImageLoaded: false,\n            isImageFailLoaded: false\n        });\n    }\n\n    /**\n     * This method is called by the intervals (see pauseDiaporama())\n     * This method increases the seconds state and calls the nextImage() method\n     * when the seconds state is equal to the timeSwitch state\n     */\n    updateTime() {\n\n        this.setState((state) => ({\n            seconds: state.seconds + 1,\n        }));\n\n        if (this.state.seconds === this.state.timeSwitch)\n            this.nextImage();\n    }\n\n    render() {\n        return (\n            <div style={styles.imageDiv}>\n                <Image\n                    src={this.state.imageShown.src}\n                    style={styles.image}\n                    onClick={() => this.showModal()}\n                    onLoad={() => this.setImageLoaded(true)}\n                    onError={() => this.setImageFailLoaded(true)}\n                    fluid\n                />\n                <DImageLoading isImageLoaded={this.state.isImageLoaded}/>\n                <div style={styles.textAndButtonDiv}>\n                    <text style={styles.imageText}>{this.state.imageShown.name}</text>\n                    <DModal showModal={this.state.showModal} hideModal={() => this.hideModal()} imageShown={this.state.imageShown} />\n                    <DPauseButton onClick={() => this.pauseDiaporama()} isPaused={this.state.isPaused}></DPauseButton>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Diaporama;","import React from 'react';\nimport './App.css';\n\nimport Diaporama from './components/Diaporama'\n\nfunction App() {\n    return (\n        <div style={{'--color-1': 'deepskyblue', '--color-2': 'navy',\n            background: `linear-gradient(170deg, var(--color-1), var(--color-2) 80%)`}}>\n            <Diaporama />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//Bootstrap\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}