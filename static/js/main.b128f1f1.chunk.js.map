{"version":3,"sources":["assets/next.png","components/ImageButton.js","images/imageList.js","components/ImageDisplayer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ImageButton","props","Button","variant","onClick","Categories","portrait","name","style","paysage","ImageList","src","categories","ImageDisplayer","useState","image","setImage","Image","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8JAAAA,EAAOC,QAAU,IAA0B,kC,uGCuB5BC,MAdf,SAAqBC,GASjB,OACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,kBAAMH,EAAMG,YAA/C,oB,cCjBFC,EAAa,CACfC,SAAU,CAACC,KAAM,WAAYC,MAAO,YACpCC,QAAS,CAACF,KAAM,UAAWC,MAAO,YAavBE,EALG,CACd,CAACH,KAAM,SAAUI,IAAK,qBAAsBC,WAAY,CAACP,EAAWC,WACpE,CAACC,KAAM,WAAYI,IAAK,qBAAsBC,WAAY,CAACP,EAAWC,YCS3DO,MAhBf,WAA2B,IAAD,EACIC,mBAASJ,EAAU,IADvB,mBACfK,EADe,KACRC,EADQ,KAOtB,OACI,6BACA,8BAAOD,EAAMR,MACb,kBAACU,EAAA,EAAD,MACA,kBAAC,EAAD,CAAab,QARjB,WACIY,EAASN,EAAU,SCGZQ,MARf,WACI,OACA,4BAAQC,UAAW,cACf,kBAAC,EAAD,QCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b128f1f1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/next.07feb8e5.png\";","import React from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport Image from 'react-bootstrap/Image';\n\nimport logo from '../assets/next.png'\n\n\n\nfunction ImageButton(props)\n{\n    const Styles = {\n        logo: {\n            width: 250,\n            height: 250\n        }\n    }\n\n    return (\n        <Button variant=\"primary\" onClick={() => props.onClick()}>Prochaine image</Button>\n    );\n}\n\nexport default ImageButton;","//Liste des images\n\nconst Categories = {\n    portrait: {name: \"portrait\", style: \"Portrait\"},\n    paysage: {name: \"paysage\", style: \"Paysage\"},\n}\n\n// Liste des images\n// Une image est un objet qui contient\n// name : le nom de l'image\n// src : le chemin vers la source de l'image\n// categories : un tableau contenant les cat√©gories\nconst ImageList = [\n    {name: \"Lights\", src: \"../assets/next.png\", categories: [Categories.portrait]},\n    {name: \"Rooftops\", src: \"../assets/next.png\", categories: [Categories.portrait]}\n]\n\nexport default ImageList;","import React, { useState } from 'react';\n\nimport Image from 'react-bootstrap/Image';\n\nimport ImageList from '../images/imageList.js';\nimport ImageButton from './ImageButton'\n\nfunction ImageDisplayer() {\n    const [image, setImage] = useState(ImageList[0]);\n\n    function swapImage() {\n        setImage(ImageList[1]);\n    }\n\n    return (\n        <div>\n        <text>{image.name}</text>\n        <Image></Image>\n        <ImageButton onClick={swapImage}></ImageButton>\n        </div>\n    )\n}\n\nexport default ImageDisplayer;","import React from 'react';\nimport './App.css';\n\nimport ImageButton from './components/ImageButton'\nimport ImageDisplayer from './components/ImageDisplayer'\n\nfunction App() {\n    return (\n    <header className={\"App-header\"}>\n        <ImageDisplayer></ImageDisplayer>\n    </header>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//Bootstrap\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}